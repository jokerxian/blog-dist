import{_ as e,c as i,o as p,a2 as a}from"./chunks/framework.BgExJILf.js";const b=JSON.parse('{"title":"Github实现图床","description":"","frontmatter":{},"headers":[],"relativePath":"column/tool/图床.md","filePath":"column/tool/图床.md"}'),t={name:"column/tool/图床.md"},l=a(`<h1 id="github实现图床" tabindex="-1">Github实现图床 <a class="header-anchor" href="#github实现图床" aria-label="Permalink to &quot;Github实现图床&quot;">​</a></h1><p>Typora里的图片是无法直接赋值粘贴到网上的，因为图片存储在本地，网上读取不到本地图片的！</p><p>这个时候，图床的用途就体现出来了。使用Typora的自带功能，当我们在Typora里插入图片时，能自动的上传至网络，并且得到图片的url连接！</p><hr><h2 id="一、国内图床比较" tabindex="-1">一、国内图床比较 <a class="header-anchor" href="#一、国内图床比较" aria-label="Permalink to &quot;一、国内图床比较&quot;">​</a></h2><p>图床：储存图片的服务器，有国内和国外之分。</p><p>结合网上的资料在这里举几个例子</p><ol><li><p>公共图床：这类图床一般可以直接上传图片，会返回一个链接，供你使用</p><ul><li><p>SM.MS图床：无需注册，没有广告，直接上传</p></li><li><p>路过图床：有点广告，需要注册</p></li></ul></li><li><p>代码托管平台：这类图床一般是建立在代码托管平台的仓库中，使用时要公开仓库</p><ul><li><p>GitHub：全球最大代码托管平台，目前除了国内速度慢，几乎没啥缺陷</p></li><li><p>Gitee：国内仿GitHub代码托管平台，但免费的各种容量上的限制，优点是国内速度快</p></li><li><p>七牛云：速度快，缺点是要点小钱，免费的各种限制</p></li></ul></li><li><p>服务器图床:</p><p>各大云服务器：阿里云，百度云，华为云,或者私人服务器 。除了费用高，没啥缺点，全是优点</p></li></ol><p>但是作为一个学生党，当然白嫖最香！</p><p>在gitee和github上纠结很久，最终选择github + jsDelivr（加速），因为gitee的免费个人的空间太小了，并且上传文件的大小限制 &lt; 1M。</p><hr><h2 id="二、使用github搭建图床" tabindex="-1">二、使用Github搭建图床 <a class="header-anchor" href="#二、使用github搭建图床" aria-label="Permalink to &quot;二、使用Github搭建图床&quot;">​</a></h2><p>新建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091501120.png" alt="image-20240709150118025"></p><p>点击右上角用户头像 =&gt; settings</p><p>生成token令牌，往下拉，直到左侧到底，选择Developer settings</p><p>按图点击</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091504205.png" alt="image-20240709150454091"></p><p>验证选择密码验证</p><p>可以给令牌(token)做个Note(标记)，然后选择令牌(token)截止时间。这里不建议选永久，因为不安全。基本是该图床你用到多久就选多久即可。</p><p>选择 repo 权限，然后拉到底部，选择创建就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091506931.png" alt="image-20240709150659859"></p><p>创建完毕之后，生成的Token是你的账户下的github服务器的令牌，最好用记事本记录下来，后面会用到。</p><hr><h2 id="三、picgo整合github图床" tabindex="-1">三、PicGo整合Github图床 <a class="header-anchor" href="#三、picgo整合github图床" aria-label="Permalink to &quot;三、PicGo整合Github图床&quot;">​</a></h2><p>PicGo是一款优秀的图床工具，能够自动把本地图片上传至网络，并转换成可访问的链接。</p><h3 id="_1、下载并安装picgo" tabindex="-1">1、下载并安装PicGo <a class="header-anchor" href="#_1、下载并安装picgo" aria-label="Permalink to &quot;1、下载并安装PicGo&quot;">​</a></h3><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noreferrer">https://github.com/Molunerfinn/PicGo/releases</a></p><p>根据自己的操作系统（Win/Linux/Mac）来下载安装包（版本可根据需要选择）</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091507760.png" alt="image-20240709150754719"></p><h3 id="_2、设置图床" tabindex="-1">2、设置图床 <a class="header-anchor" href="#_2、设置图床" aria-label="Permalink to &quot;2、设置图床&quot;">​</a></h3><p>图床设置 =&gt; Github</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091508317.png" alt="image-20240709150838269"></p><h3 id="_3、整合jsdelivr" tabindex="-1">3、整合jsDelivr <a class="header-anchor" href="#_3、整合jsdelivr" aria-label="Permalink to &quot;3、整合jsDelivr&quot;">​</a></h3><p>想要知道jsDelivr的作用，首先就需要了解CDN是什么</p><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>由于Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><p>进行图床配置：</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091509435.png" alt="image-20240709150915389"></p><h4 id="具体配置介绍" tabindex="-1">具体配置介绍 <a class="header-anchor" href="#具体配置介绍" aria-label="Permalink to &quot;具体配置介绍&quot;">​</a></h4><ol><li><p>图床配置名：自己取</p></li><li><p>设定仓库名：用户名+仓库名</p></li><li><p>设定分支名：main</p></li><li><p>设定Token：就是上面我们刚刚在Github上获取的token</p></li><li><p>设定存储路径：需要放到仓库中的哪个文件夹下。</p><ul><li><p>如果直接放到仓库的根目录下就不需要填写这一栏</p></li><li><p>如果需要放到某个目录下，直接写目录名就行，不需要在目录名前加 / 。</p></li></ul><blockquote><p>建议在路径后面统一都加个 &#39; / &#39;，否则PicGo会在test后再拼接上本地的文件名然后一起作为远程仓库存储图片的图片名</p></blockquote><p>eg：test/</p><ul><li><p>当有多级目录时，也是直接写路径。</p><p>eg：test/test1/test2/</p></li><li><p>当填写的目录不存在时，PicGo会自动帮你在Github上创建目录，这个不用担心！</p></li></ul></li><li><p>设定自定义域名：此时就需要结合jsDelivr来加速了</p><p>打开jsDelivr官网，了解它的使用方法：<a href="https://www.jsdelivr.com" target="_blank" rel="noreferrer">https://www.jsdelivr.com</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0ce5caa21fd5c6b64484ca45c879b145.png#pic_center" alt="在这里插入图片描述"></p><div class="language-prism vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">prism</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/</span></span>
<span class="line"><span># user：Github上的用户名</span></span>
<span class="line"><span># repo：仓库名</span></span>
<span class="line"><span># @version：版本号（这里我们可以不管）</span></span>
<span class="line"><span># file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）</span></span>
<span class="line"><span>https://cdn.jsdelivr.net/gh/user/repo@version/file</span></span></code></pre></div><p>例如我的自定义域名就为：<a href="https://cdn.jsdelivr.net/gh/jokerxian/pics" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/jokerxian/pics</a></p><blockquote><p>这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用@ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。</p><p>eg：我需要上传到test分支上，此时自定义域名就变成了：<a href="https://cdn.jsdelivr.net/gh/jokerxian/pics@test" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/jokerxian/pics@test</a></p></blockquote></li></ol><h3 id="_4、测试" tabindex="-1">4、测试 <a class="header-anchor" href="#_4、测试" aria-label="Permalink to &quot;4、测试&quot;">​</a></h3><p>配置完成后，切换到刚刚配置好的图床，然后手动上传图片试试：可以点击&#39;点击上传&#39;，也可以通过拖拽的方式进行上传</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091513960.png" alt="image-20240709151308894"></p><p>然后，我们能够在相册中看到我们已经上传的图片，可以查看、复制已经上传的图片的URL，同时也可以将上传的图片删除。</p><h3 id="_5、附录" tabindex="-1">5、附录 <a class="header-anchor" href="#_5、附录" aria-label="Permalink to &quot;5、附录&quot;">​</a></h3><p>可以在PicGo设置中开启 时间戳重命名 ，这样同时上传相同的图片就不会被覆盖了。</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091513502.png" alt="image-20240709151340451"></p><hr><h2 id="四、typora整合picgo实现自动上传" tabindex="-1">四、Typora整合PicGo实现自动上传 <a class="header-anchor" href="#四、typora整合picgo实现自动上传" aria-label="Permalink to &quot;四、Typora整合PicGo实现自动上传&quot;">​</a></h2><blockquote><p>PS：使用Typora上传的时候同样需要关闭steam++</p></blockquote><p>在Typora中配合PicGo，就可以实现在文章中插入图片时自动上传。</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091514181.png" alt="image-20240709151450138"></p><p>按如图所示配置。</p><p>插入图片时选择上传图片。在上传服务内选择PicGo，并选择PicGo.exe的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/jokerxian/pic/pics/202407091514741.png" alt="image-20240709151432687"></p><p>大功告成！快去在Typora中插入一张图片试试吧！</p>`,57),r=[l];function s(n,o,c,h,d,g){return p(),i("div",null,r)}const m=e(t,[["render",s]]);export{b as __pageData,m as default};
