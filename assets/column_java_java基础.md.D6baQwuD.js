import{_ as s,c as a,o as i,a2 as t}from"./chunks/framework.BgExJILf.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/java/java基础.md","filePath":"column/java/java基础.md"}'),n={name:"column/java/java基础.md"},l=t(`<h2 id="_1hello-java" tabindex="-1">1<code>Hello.java</code> <a class="header-anchor" href="#_1hello-java" aria-label="Permalink to &quot;1\`Hello.java\`&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HelloWorld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="如何运行一个java文件" tabindex="-1">如何运行一个Java文件？ <a class="header-anchor" href="#如何运行一个java文件" aria-label="Permalink to &quot;如何运行一个Java文件？&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># javac: 编译生成Hello.class字节码文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -encoding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utf-8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello.java</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># java: 运行.class文件 -- 不要带.class后缀</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello</span></span></code></pre></div><p><img src="https://pic.imgdb.cn/item/661788c568eb935713411432.png" alt=""></p><h2 id="_2-jdk" tabindex="-1">2 JDK <a class="header-anchor" href="#_2-jdk" aria-label="Permalink to &quot;2 JDK&quot;">​</a></h2><p>JDK：Java开发工具包</p><ul><li>JVM虚拟机：Java程序运行的地方</li><li>核心类库：Java已经写好的功能，可拿来直接使用</li><li>开发工具：javac、java、jdb、jhat...</li></ul><h3 id="jre" tabindex="-1">JRE <a class="header-anchor" href="#jre" aria-label="Permalink to &quot;JRE&quot;">​</a></h3><p>JRE：Java运行环境</p><p>JVM、核心类库</p><p><img src="https://pic.imgdb.cn/item/6617895368eb93571341eac3.png" alt=""></p><h2 id="_3-注释" tabindex="-1">3 注释 <a class="header-anchor" href="#_3-注释" aria-label="Permalink to &quot;3 注释&quot;">​</a></h2><p>注释：对代码进行解释说明的文字，增加代码可读性。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 单行注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HelloWorld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-关键字" tabindex="-1">4 关键字 <a class="header-anchor" href="#_4-关键字" aria-label="Permalink to &quot;4 关键字&quot;">​</a></h2><p>关键字：有特殊意义的英文小写单词</p><table><thead><tr><th>序号</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>byte</td><td>基本数据类型之一，字节类型。可存储在[-128,127]范围以内的整数值。</td></tr><tr><td>2</td><td>short</td><td>基本数据类型之一，短整数类型。可以存储 16 位带符号的整数</td></tr><tr><td>3</td><td>int</td><td>基本数据类型之一，整数类型。可以存储 32 位的整数值。</td></tr><tr><td>4</td><td>long</td><td>基本数据类型之一，长整数类型。可以存储 64 位的带符号整数。</td></tr><tr><td>5</td><td>float</td><td>基本数据类型之一，单精度浮点数类型。可以存储单精度浮点值。</td></tr><tr><td>6</td><td>double</td><td>基本数据类型之一，双精度浮点数类型。可以存储双精度浮点值。</td></tr><tr><td>7</td><td>char</td><td>基本数据类型之一，字符类型。char 变量可以存储一个 Unicode 字符。</td></tr><tr><td>8</td><td>boolean</td><td>基本数据类型之一，布尔类型。可以是 true 或 false。</td></tr><tr><td>9</td><td>abstract</td><td>表明类或者成员方法具有抽象属性。可以修饰类或方法，abstract 类可以扩展（增加子类），但不能直接实例化。abstract 方法不在声明它的类中实现，但必须在某个子类中重写。</td></tr><tr><td>10</td><td>class</td><td>声明一个类。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。</td></tr><tr><td>11</td><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口。用在 class 或 interface 声明中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。</td></tr><tr><td>12</td><td>final</td><td>用户说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量。可以应用于类，以指示不能扩展该类（不能有子类）。可以应用于方法，以指示不能重写任何子类中的方法。</td></tr><tr><td>13</td><td>implements</td><td>表明一个类实现了给定的接口。implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。</td></tr><tr><td>14</td><td>interface</td><td>接口。用来声明新的 Java 接口，接口是方法的集合。</td></tr><tr><td>15</td><td>private</td><td>一种访问控制方式：私用模式。private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。</td></tr><tr><td>16</td><td>protected</td><td>一种访问控制方式：保护模式。protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</td></tr><tr><td>17</td><td>public</td><td>一种访问控制方式：共用模式。public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</td></tr><tr><td>18</td><td>static</td><td>表明具有静态属性。可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。</td></tr><tr><td>19</td><td>void</td><td>声明当前成员方法没有返回值。void 关键字表示 null 类型。</td></tr><tr><td>20</td><td>break</td><td>提前跳出一个块。用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。（break 总是退出最深层的 while、for、do 或 switch 语句。）</td></tr><tr><td>21</td><td>case</td><td>用在 switch 语句之中，表示其中的一个分支。用来标记 switch 语句中的每个分支。</td></tr><tr><td>22</td><td>continue</td><td>回到一个块的开始处。用来跳转到 for、while 或 do 循环的下一个迭代。continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。</td></tr><tr><td>23</td><td>default</td><td>默认，例如，用在 switch 语句中，表明一个默认的分支。用来标记 switch 语句中的默认分支。</td></tr><tr><td>24</td><td>do</td><td>用在 do-while 循环结构中。用于指定一个在每次迭代结束时检查其条件的循环。</td></tr><tr><td>25</td><td>else</td><td>用在条件语句中，表明当条件不成立时的分支。总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。</td></tr><tr><td>26</td><td>for</td><td>一种循环结构的引导词。用于指定一个在每次迭代结束前检查其条件的循环。</td></tr><tr><td>27</td><td>if</td><td>条件语句的引导词。有条件地执行代码块。条件的计算结果必须是布尔值。</td></tr><tr><td>28</td><td>return</td><td>从成员方法中返回数据。return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。</td></tr><tr><td>29</td><td>switch</td><td>分支语句结构的引导词。switch 语句用于基于某个表达式选择执行多个代码块中的某一个。</td></tr><tr><td>30</td><td>while</td><td>用在循环结构中。用于指定一个只要条件为真就会重复的循环。</td></tr><tr><td>31</td><td>catch</td><td>用在异常处理中，用来捕捉异常。用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。</td></tr><tr><td>32</td><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块。用来定义始终在 try-catch-finally 语句中执行的块。finally 块通常包含清理代码，用在部分执行 try 块后恢复正常运行。</td></tr><tr><td>33</td><td>throw</td><td>抛出一个异常。用于引发异常。</td></tr><tr><td>34</td><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常。throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。</td></tr><tr><td>35</td><td>try</td><td>尝试一个可能抛出异常的程序块。用于包含可能引发异常的语句块。</td></tr><tr><td>36</td><td>import</td><td>表明要访问指定的类或包。import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。</td></tr><tr><td>37</td><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象。用来确定对象所属的类。</td></tr><tr><td>38</td><td>new</td><td>用来创建新实例对象。用于创建类的新实例。</td></tr><tr><td>39</td><td>package</td><td>包。package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。</td></tr><tr><td>40</td><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化。volatile 关键字用于表示可以被多个线程异步修改的成员变量。</td></tr><tr><td>41</td><td>transient</td><td>声明不用序列化的成员域。transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。</td></tr><tr><td>42</td><td>this</td><td>指向当前实例对象的引用。用于引用当前实例。</td></tr><tr><td>43</td><td>synchronized</td><td>表明一段代码需要同步执行。synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。</td></tr><tr><td>44</td><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法。用于引用使用该关键字的类的超类。</td></tr><tr><td>45</td><td>strictfp</td><td>用来声明 FP_strict（单精度或双精度浮点数）表达式遵循 IEEE 754 算术规范</td></tr><tr><td>46</td><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如 C/C++/FORTRAN 语言）实现的。可以应用于方法，以指示该方法是用 Java 以外的语言实现的。</td></tr><tr><td>47</td><td>enum</td><td>枚举</td></tr><tr><td>48</td><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>49</td><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>50</td><td>goto</td><td>保留关键字，没有具体含义</td></tr></tbody></table><h2 id="_5-常量" tabindex="-1">5 常量 <a class="header-anchor" href="#_5-常量" aria-label="Permalink to &quot;5 常量&quot;">​</a></h2><p>常量：被写下来的固定值</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;字符串&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_6-变量" tabindex="-1">6 变量 <a class="header-anchor" href="#_6-变量" aria-label="Permalink to &quot;6 变量&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 定义变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 数据类型 变量名 = 数据值;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_7-数据类型" tabindex="-1">7 数据类型 <a class="header-anchor" href="#_7-数据类型" aria-label="Permalink to &quot;7 数据类型&quot;">​</a></h2><h4 id="八种基本数据类型" tabindex="-1">八种基本数据类型 <a class="header-anchor" href="#八种基本数据类型" aria-label="Permalink to &quot;八种基本数据类型&quot;">​</a></h4><ol><li>整型：byte、short、int、long</li><li>字符型：char</li><li>浮点型：float、double</li><li>布尔型：boolean</li></ol><table><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:center;">对应包装类</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">Byte</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">Short</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">Long</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">Double</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">Boolean</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">Character</td></tr></tbody></table><h2 id="_8-运算符" tabindex="-1">8 运算符 <a class="header-anchor" href="#_8-运算符" aria-label="Permalink to &quot;8 运算符&quot;">​</a></h2><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><p>对变量进行操作的符号</p><ol><li><code>+</code>：加法 -- 字符串时+会被当作连接符</li><li><code>-</code>：减法</li><li><code>*</code>：乘法</li><li><code>/</code>：除法</li><li><code>%</code>：取余</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int a = 1 + 2;</span></span></code></pre></div><h4 id="隐式转换-自动类型提升" tabindex="-1">隐式转换（自动类型提升） <a class="header-anchor" href="#隐式转换-自动类型提升" aria-label="Permalink to &quot;隐式转换（自动类型提升）&quot;">​</a></h4><p>把一个取值范围小的数值，转成取值范围大的变量</p><p><code>byte</code> -&gt; <code>short</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int a = 1;</span></span>
<span class="line"><span>double b = a;</span></span></code></pre></div><h4 id="强制转换" tabindex="-1">强制转换 <a class="header-anchor" href="#强制转换" aria-label="Permalink to &quot;强制转换&quot;">​</a></h4><p>把一个取值范围大的数值，转成取值范围小的变量</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 目标数据类型 变量名 = (目标数据类型) 被强转的数据;</span></span>
<span class="line"><span>double a = 1.1;</span></span>
<span class="line"><span>int b = (int) a;</span></span></code></pre></div><h3 id="自增自减运算符" tabindex="-1">自增自减运算符 <a class="header-anchor" href="#自增自减运算符" aria-label="Permalink to &quot;自增自减运算符&quot;">​</a></h3><ol><li><code>++</code>: 变量值加1</li><li><code>--</code>: 变量值减1</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int a  = 1;</span></span>
<span class="line"><span>a++;</span></span>
<span class="line"><span>++a;</span></span></code></pre></div><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><p>把 = 号右边的结果 赋给 左边的变量</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int num = 1 + 2 * 3</span></span></code></pre></div><h3 id="关系运算符-比较运算符" tabindex="-1">关系运算符(比较运算符) <a class="header-anchor" href="#关系运算符-比较运算符" aria-label="Permalink to &quot;关系运算符(比较运算符)&quot;">​</a></h3><ol><li><code>==</code></li><li><code>!=</code></li><li><code>&gt;</code></li><li><code>&gt;=</code></li><li><code>&lt;</code></li><li><code>&lt;=</code></li></ol><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><ol><li><code>&amp;</code>：逻辑且，两边都为真，结果才是真</li><li><code>|</code>：逻辑或，两边都为假，结果才是假</li><li><code>^</code>：逻辑异或，相同为false，不同为true</li><li><code>!</code>：逻辑非，取反</li><li><code>&amp;&amp;</code>：短路与，两边都为真，结果才是真</li><li><code>||</code>：短路或，两边都为假，结果才是假</li></ol><p><code>&amp;</code>和<code>|</code>： 无论左边true/false，右边都要执行 <code>&amp;&amp;</code>和<code>||</code>： 如果左边能确定整个表达式的结果，右边将不再执行</p><h3 id="三元运算符" tabindex="-1">三元运算符 <a class="header-anchor" href="#三元运算符" aria-label="Permalink to &quot;三元运算符&quot;">​</a></h3><p>格式： <code>关系表达式 ? 结果1 : 结果2;</code> 如果关系表达式结果为true则为结果1，为false则为结果2</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int a = 2 &gt; 1 ? 2 : 1;</span></span></code></pre></div><h3 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h3><ol><li><code>()</code></li><li><code>*</code>、<code>/</code></li><li><code>+</code>、<code>-</code></li></ol><h2 id="_9-if" tabindex="-1">9 if <a class="header-anchor" href="#_9-if" aria-label="Permalink to &quot;9 if&quot;">​</a></h2><p>判断条件的结果，必须是布尔类型true或false true会执行if内的代码语句 false则不会执行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if (判断条件) {</span></span>
<span class="line"><span>    条件成立时执行...</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="if-else" tabindex="-1">if else <a class="header-anchor" href="#if-else" aria-label="Permalink to &quot;if else&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if (判断条件) {</span></span>
<span class="line"><span>    条件成立时执行...</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>    条件不成立时执行...</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="if-elif-else" tabindex="-1">if elif else <a class="header-anchor" href="#if-elif-else" aria-label="Permalink to &quot;if elif else&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if (条件1) {</span></span>
<span class="line"><span>    条件1成立时执行...</span></span>
<span class="line"><span>} else if (条件2) {</span></span>
<span class="line"><span>    条件2成立时执行...</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>    条件1和2都不成立时执行...</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;18...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;大娃娃...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小娃娃...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_10-switch" tabindex="-1">10 switch <a class="header-anchor" href="#_10-switch" aria-label="Permalink to &quot;10 switch&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>switch (表达式) {</span></span>
<span class="line"><span>    case 值1:</span></span>
<span class="line"><span>        当表达式结果为值1时执行...</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>    case 值2:</span></span>
<span class="line"><span>        当表达式结果为值2时执行...</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>    default:</span></span>
<span class="line"><span>        当表达式结果不为值1和值2时执行...</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            default:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_11-while" tabindex="-1">11 while <a class="header-anchor" href="#_11-while" aria-label="Permalink to &quot;11 while&quot;">​</a></h2><p>只要条件满足会无限循环执行...</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>while (条件) {</span></span>
<span class="line"><span>    条件满足时执行...</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_12-for" tabindex="-1">12 for <a class="header-anchor" href="#_12-for" aria-label="Permalink to &quot;12 for&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>for (初始化语句; 条件判断语句; 条件控制语句) {</span></span>
<span class="line"><span>    循环体语句...</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_13-continue" tabindex="-1">13 continue <a class="header-anchor" href="#_13-continue" aria-label="Permalink to &quot;13 continue&quot;">​</a></h2><p>临时跳过，中断本次循环，直接进入下一次循环</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public class Hello {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span>            if (i == 3) {</span></span>
<span class="line"><span>                continue;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            System.out.println(i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="break" tabindex="-1">break <a class="header-anchor" href="#break" aria-label="Permalink to &quot;break&quot;">​</a></h3><p>直接结束循环</p><blockquote><p>在嵌套循环中，只能作用在所在层循环上，无法对上层循环起作用</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public class Hello {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span>            if (i == 3) {</span></span>
<span class="line"><span>                break;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            System.out.println(i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div>`,83),p=[l];function e(h,d,k,r,c,o){return i(),a("div",null,p)}const y=s(n,[["render",e]]);export{g as __pageData,y as default};
