import{_ as o,c as e,o as t,a2 as n}from"./chunks/framework.BgExJILf.js";const h=JSON.parse('{"title":"🚛 一分钟拿下一道面试题","description":"","frontmatter":{},"headers":[],"relativePath":"column/javaQuestion/一分钟一道面试题.md","filePath":"column/javaQuestion/一分钟一道面试题.md"}'),r={name:"column/javaQuestion/一分钟一道面试题.md"},c=n('<h1 id="🚛-一分钟拿下一道面试题" tabindex="-1">🚛 一分钟拿下一道面试题 <a class="header-anchor" href="#🚛-一分钟拿下一道面试题" aria-label="Permalink to &quot;🚛 一分钟拿下一道面试题&quot;">​</a></h1><h2 id="_1-int-和-integer-有什么区别" tabindex="-1">1. int 和 Integer 有什么区别？ <a class="header-anchor" href="#_1-int-和-integer-有什么区别" aria-label="Permalink to &quot;1. int 和 Integer 有什么区别？&quot;">​</a></h2><ul><li><p><strong>基本类型/包装类型</strong>：<code>Integer</code> 是 <code>int</code> 的 <strong>包装类型</strong>，<code>int</code> 则是 Java 的一种 <strong>基本数据类型</strong>。</p></li><li><p><strong>空值表示</strong>：<code>Integer</code> 的默认值是 <code>null</code>，<code>int</code> 的默认值是 <code>0</code>。</p></li><li><p>类型转换</p><p>：</p><ul><li><code>int</code> 通过 <strong>强制类型转换</strong> 转换为其他类型，如 <code>long</code>、<code>float</code> 或 <code>double</code>。</li><li><code>Integer</code> 使用 <strong>相应的方法</strong> 进行类型转换，如 <code>intValue()</code> 将其转换为 <code>int</code> 值。</li></ul></li><li><p>在集合中的使用</p><p>：</p><ul><li>集合类（如 <code>List</code>、<code>Set</code> 等）只能存储 <strong>对象</strong>，不能直接存储 <strong>基本类型</strong> 的值。</li><li>因此，如果要在 <strong>集合中存储整数</strong>，必须使用 <code>Integer</code> 类型，而不是 <code>int</code> 类型。</li></ul></li></ul><h2 id="_2-与-equals-有什么区别" tabindex="-1">2. <code>==</code> 与 <code>equals</code> 有什么区别？ <a class="header-anchor" href="#_2-与-equals-有什么区别" aria-label="Permalink to &quot;2. `==` 与 `equals` 有什么区别？&quot;">​</a></h2><p><code>==</code>：</p><ul><li>用于 <strong>基本类型</strong> 比较时，<strong>比较值</strong> 是否相等；</li><li>用于 <strong>引用类型</strong> 比较时，<strong>比较对象的内存地址</strong> 是否相等。</li></ul><p><code>equals</code>：</p><ul><li>默认是 <strong>比较对象的内存地址</strong>，但大多数类都会 <strong>重写 <code>equals</code> 方法</strong> 来改变默认行为，使其 <strong>比较对象的内容</strong> 而不是对象的 <strong>内存地址</strong>。</li><li>例如 <code>String</code>、<code>Integer</code> <strong>重写了 <code>equals</code> 方法</strong>，变成 <strong>比较值</strong> 是否相等。</li></ul>',8),s=[c];function d(a,l,i,g,_,u){return t(),e("div",null,s)}const m=o(r,[["render",d]]);export{h as __pageData,m as default};
