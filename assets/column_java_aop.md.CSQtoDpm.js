import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.D3nF4eGI.js";const F=JSON.parse('{"title":"SpringAop的使用","description":"","frontmatter":{},"headers":[],"relativePath":"column/java/aop.md","filePath":"column/java/aop.md"}'),t={name:"column/java/aop.md"},p=n(`<h1 id="springaop的使用" tabindex="-1">SpringAop的使用 <a class="header-anchor" href="#springaop的使用" aria-label="Permalink to &quot;SpringAop的使用&quot;">​</a></h1><h2 id="_1、什么是aop" tabindex="-1">1、什么是AOP？ <a class="header-anchor" href="#_1、什么是aop" aria-label="Permalink to &quot;1、什么是AOP？&quot;">​</a></h2><p>AOP：面向切面编程。简单说，就是把一些业务逻辑中的相同的代码抽取到一个独立的模块中，让业务逻辑更加清晰。即 AOP 的主要作用就是在不侵入原有程序的基础上实现对原有功能的增强， 而增强的方式就是添加通知，就是额外增强一个方法。按照不同的方式通知又分为前置、后置、环绕、异常、带有返回值。</p><h2 id="_2、aop相关概念" tabindex="-1">2、AOP相关概念 <a class="header-anchor" href="#_2、aop相关概念" aria-label="Permalink to &quot;2、AOP相关概念&quot;">​</a></h2><p>切面（Aspect）：类是对物体特征的抽象，切面就是对横切关注点的抽象</p><p>连接点（Joinpoint）：被拦截到的点，因为 Spring 只支持方法类型的连接点，所以在 Spring中连接点指的就是被拦截到的方法</p><p>切点（Pointcut）：对连接点进行拦截的定位</p><p>通知（Advice）：指拦截到连接点之后要执行的代码，也可以称作增强</p><p>目标对象 （Target）：代理的目标对象</p><h2 id="_3、aop的环绕方式" tabindex="-1">3、AOP的环绕方式 <a class="header-anchor" href="#_3、aop的环绕方式" aria-label="Permalink to &quot;3、AOP的环绕方式&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">前置通知</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@Before)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">返回通知</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@AfterReturning)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">异常通知</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@AfterThrowing)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">后置通知</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@After)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">环绕通知</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (@Around)</span></span></code></pre></div><h2 id="_4、aop应用-我这里是校验某些接口的token" tabindex="-1">4、AOP应用（我这里是校验某些接口的Token） <a class="header-anchor" href="#_4、aop应用-我这里是校验某些接口的token" aria-label="Permalink to &quot;4、AOP应用（我这里是校验某些接口的Token）&quot;">​</a></h2><p>引入依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>自定义注解：自定义一个注解作为切点，注解所在的方法上，即为要切入的方法</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Retention(RetentionPolicy.RUNTIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ElementType.METHOD})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Token{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>配置切面</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Slf4j</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Aspect</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Component</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TokenAop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Pointcut(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;@annotation(自定义注解地址)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> void</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tokenCheckPointcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Before(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;tokenCheckPointcut()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> void</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> beforeToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JoinPoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> joinPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        HttpServletRequest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((ServletRequestAttributes) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestContextHolder.getRequestAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.getRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UtilMD5.checkAuthByRequestHead(request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            log.error(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Token校验失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Token校验失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>@Aspect：标识切面</p><p>@Pointcut：设置切点，这里以自定义注解为切点，定义切点有很多其它种方式，自定义注解是比较常用的一种。</p><p>@Before：在切点之前织入，打印了一些入参信息</p><p>@Around：环绕切点，打印返回参数和接口执行时间</p><p>使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Token(desc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;这是一个需要校验的接口&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello &quot;+name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div>`,24),h=[p];function l(e,k,r,d,o,E){return a(),i("div",null,h)}const c=s(t,[["render",l]]);export{F as __pageData,c as default};
